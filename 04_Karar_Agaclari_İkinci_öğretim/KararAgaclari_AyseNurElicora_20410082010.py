# -*- coding: utf-8 -*-
"""ML_KararAgaclari.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LRIDXIh-Xgj1qbqCtHjm5IVHc9NJG3UZ

# **Karar Ağaçları(Decision Trees)**


Ayşe Nur Eliçora

*20410082010*


> Karar ağaçları bütün yapraklar yalın olana kadar devam ederse model karmaşık olacaktır. Bu durumda eğitim overfit yani aşırı uydurma problemi ortaya çıkar.



>Overfittingi engellemek için iki genel strateji vardır : İlk Budama(ağaç tamamlanmadan dallanmayı durdurmak) ve Son Budama(ağaç tamamlandıktan sonra az bilgi içeren yaprakların kaldırılması)
"""

#Sınıflandırma için karar ağaçları

#Sklearn kütüphanesindeki göğüs kanseri veri setimizi alıyoruz.
from sklearn.datasets import load_breast_cancer
kanser=load_breast_cancer()

#Eğitim ve test verilerini oluşturuyoruz.
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(kanser.data,kanser.target,stratify=kanser.target)

#Sınıflandırma için karar ağacı:
from sklearn.tree import DecisionTreeClassifier
tree = DecisionTreeClassifier()

#eğitim verisi için modeli kurmak
tree.fit(X_train,y_train)

print(tree.score(X_train,y_train))
print(tree.score(X_test,y_test))

"""**ilk budama**"""

tree = DecisionTreeClassifier(max_depth=3)
tree.fit(X_train,y_train)

print(tree.score(X_train,y_train))
print(tree.score(X_test,y_test))

"""**Karar Ağacını Görselleştirmek**"""

from sklearn.tree import export_graphviz
import graphviz

export_graphviz(tree, out_file="mytree.dot",feature_names=kanser.feature_names,filled=True)
with open("mytree.dot") as f:
    dot_graph = f.read()
graphviz.Source(dot_graph)

"""**Regresyon İçin Karar Ağaçları**"""

from sklearn.tree import  DecisionTreeRegressor
tree_reg =  DecisionTreeRegressor(max_depth=2)
tree_reg.fit(X_train,y_train)

export_graphviz(tree_reg, out_file="mytree1.dot",feature_names=kanser.feature_names,filled=True)
with open("mytree1.dot") as f:
    dot_graph = f.read()
graphviz.Source(dot_graph)